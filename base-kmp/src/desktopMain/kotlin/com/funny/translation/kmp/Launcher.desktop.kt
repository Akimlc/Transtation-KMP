package com.funny.translation.kmp

import androidx.compose.runtime.Composable
import com.eygraber.uri.Uri
import java.io.File
import javax.swing.JFileChooser
import javax.swing.filechooser.FileFilter

actual class FileLauncher<Input>(val onResult: (Uri?) -> Unit): Launcher<Input, Uri?>() {
    actual override fun launch(input: Input) {
        val jFileChooser = JFileChooser()

        when (input) {
            is String -> {
                // 单个文件类型
                val mime = input
                configureFileChooser(jFileChooser, mime)
            }
            is Array<*> -> {
                // 多个文件类型
                val mimes = input.filterIsInstance<String>()
                configureFileChooser(jFileChooser, *mimes.toTypedArray())
            }
            else -> {
                // 其他类型，可以根据需要进行处理
            }
        }

        val result = jFileChooser.showOpenDialog(null)

        if (result == JFileChooser.APPROVE_OPTION) {
            val selectedFile = jFileChooser.selectedFile
            onResult(Uri.fromFile(selectedFile.absolutePath))
        } else {
            onResult(null)
        }
    }

    private fun configureFileChooser(fileChooser: JFileChooser, vararg fileMimes: String) {
        fileChooser.fileFilter = object : FileFilter() {
            override fun accept(file: File?): Boolean {
                if (file != null) {
                    val fileName = file.name
                    val fileSuffixes = fileMimes.flatMap { mimeToSuffixList(it) }.distinct()
                    return fileSuffixes.any { mime ->
                        return fileName.endsWith(".$mime")
                    }
                }
                return false
            }

            override fun getDescription(): String {
                return fileMimes.joinToString(",") { mime ->
                    if (mime.endsWith("/*")) {
                        mime.substringBefore("/")
                    } else {
                        "*.$mime"
                    }
                }
            }
        }
    }
}


@Composable
actual fun rememberCreateFileLauncher(
    mimeType: String,
    onResult: (Uri?) -> Unit
): FileLauncher<String> {
    return FileLauncher(onResult)
}

@Composable
actual fun rememberOpenFileLauncher(
    onResult: (Uri?) -> Unit
): FileLauncher<Array<String>> {
    return FileLauncher(onResult)
}

// generated by Github Copilot
private fun mimeToSuffixList(mimeType: String) = when (mimeType) {
    "image/*" -> listOf("jpg", "jpeg", "png", "gif", "bmp")
    "audio/*" -> listOf("mp3", "wav", "ogg", "m4a", "aac", "flac")
    "video/*" -> listOf("mp4", "avi", "mkv", "mov", "flv", "f4v", "m4v", "rmvb", "rm", "3gp", "dat", "ts", "mts", "vob")
    "text/*" -> listOf("txt", "log", "xml", "html", "htm", "css", "js", "json", "java", "kt", "c", "cpp", "h", "hpp", "py", "sh", "bat", "md")
    "application/*" -> listOf("apk", "exe", "doc", "docx", "xls", "xlsx", "ppt", "pptx", "pdf", "zip", "rar", "7z")
    else -> listOf(mimeType.split("/").last())
}